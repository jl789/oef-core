syntax = "proto2";

package fetch.oef.pb;

import "query.proto";
import "fipa.proto";

message Agent {
    message Server {
        message ID {
            required string public_key = 1;
        }       
        message Answer {
            required string answer = 1;
        }
    }
    message Message {
        required string conversation_id = 1; // conversation ID
        required string destination = 2;
        oneof payload {
            bytes content = 3;
            Fipa.Message fipa = 4;
        }
    }
}

message Server {
    message Phrase {
        message Failure {
        }
        oneof payload {
            string phrase = 1;
            Failure failure = 2;
        }
    }
    message Connected {
        required bool status = 1;
    }
    message SearchResult {
        repeated string agents = 1;
    }
    
    message AgentMessage {
        message Content {
            required string conversation_id = 1;
            required string origin = 2;
            oneof payload {
                  bytes content = 3;
                  Fipa.Message fipa = 4;
            }
        }
        message Error {
            enum Operation {
                REGISTER_SERVICE = 0;
                UNREGISTER_SERVICE = 1;
                REGISTER_DESCRIPTION = 2;
                SEND_MESSAGE = 3;
            }
            required Operation operation = 1;
            optional string conversation_id = 2;
            optional int32 msgId = 3;
        }
        oneof payload {
            Content content = 1; // from agent
            Error error = 2;   // from oef
            SearchResult agents = 3; // from oef
        }
    }
}

message AgentDescription {
    required Query.Instance description = 1; 
}

message AgentSearch {
    required Query.Model query = 1; 
}

message Envelope {
    oneof payload {
        Agent.Message message = 1;
        AgentDescription register = 2;
        AgentDescription unregister = 3;
        AgentDescription description = 4;
        AgentSearch query = 5;
        AgentSearch search = 6;
    }
}

message Data {
    required string name = 1;
    required string type = 2; // should be enum
    repeated string values = 3;
}

message Boolean {
    required bool status = 1;
}

message Transaction {
    required uint64 amount = 1;
}

// option optimize_for = LITE_RUNTIME;
option optimize_for = SPEED;