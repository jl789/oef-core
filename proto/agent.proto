syntax = "proto2";

package fetch.oef.pb;

message Query {
    message Attribute {
        enum Type {
            FLOAT  = 0;
            INT    = 1;
            BOOL   = 2;
            STRING = 3;
        }
        required string name = 1;
        required Type type = 2;
        required bool required = 3;
        optional string description = 4;
    }
    message DataModel {
        required string name = 1;
        repeated Attribute attributes = 2;
        optional string description = 3;
    }
    message StringPair {
        required string first = 1;
        required string second = 2;
    }
    message Instance {
        required DataModel model = 1;
        repeated StringPair values = 2;
    }
    message Value {
        oneof value {
            string s = 1;
            float f = 2;
            bool b = 3;
            int64 i = 4;
        }
    }    
    message IntPair {
        required int64 first = 1;
        required int64 second = 2;
    }
    message FloatPair {
        required float first = 1;
        required float second = 2;
    }
    message Range {
        oneof pair {
            StringPair s = 1;
            IntPair i = 2;
            FloatPair f = 3;
        }
    }
    message Relation {
        enum Operator {
            EQ    = 0; // =
            LT    = 1; // <
            LTEQ  = 2; // <=
            GT    = 3; // >
            GTEQ  = 4; // >=
            NOTEQ = 5; // !=, <>
        }
        required Operator op = 1;
        required Value val = 2;
    }
    message Set {
        message Values {
            message Ints {
                repeated int64 vals = 1;
            }
            message Floats {
                repeated float vals = 1;
            }
            message Strings {
                repeated string vals = 1;
            }
            message Bools {
                repeated bool vals = 1;
            }
            oneof values {
                Strings s = 1;
                Floats f = 2;
                Bools b = 3;
                Ints i = 4;
            }
        }
        enum Operator {
            IN    = 0;
            NOTIN = 1;
        }
        required Operator op = 1;
        required Values vals = 2;
    }
    message Constraint {
        message ConstraintType {
            message Or {
                repeated ConstraintType expr = 1;
            }
            message And {
                repeated ConstraintType expr = 1;
            }
            oneof constraint {
                Or or = 1;
                And and = 2;
                Set set = 3;
                Range range = 4;
                Relation rel = 5;
            }
        }
        required Attribute attribute = 1;
        required ConstraintType constraint = 2;
    }
    message Model {
        repeated Constraint constraints = 1;
        optional DataModel model = 2;
    }
}

message Agent {
    message Server {
        message ID {
            required string id = 1;
        }       
        message Answer {
            required string answer = 1;
        }
    }
    message Message {
        required string cid = 1; // conversation ID
        required string destination = 2;
        required bytes content = 3; // or bytes ?
    }
}

message Server {
    message Phrase {
        required string phrase = 1;
    }
    message Connected {
        required bool status = 1;
    }
    message Delivered {
        required string uuid = 1;
        required bool status = 2;
    }
    message QueryAnswer {
        repeated string agents = 1;
    }
    
    message AgentMessage {
        required string uuid = 1;
        message Content {
            required string origin = 5;
            required string content = 6;
        }
        oneof payload {
            Content content = 2;
            bool status = 3;
            QueryAnswer agents = 4;
        }
    }
}

message AgentDescription {
    required Query.Instance description = 1; 
}

message AgentSearch {
    required Query.Model query = 1; 
}

message Envelope {
    oneof payload {
        Agent.Message message = 1;
        AgentDescription register = 2;
        AgentDescription unregister = 3;
        AgentDescription description = 4;
        AgentSearch query = 5;
        AgentSearch search = 6;
    }
}

message Data {
    required string name = 1;
    required string type = 2; // should be enum
    repeated string values = 3;
}

message Boolean {
    required bool status = 1;
}

// option optimize_for = LITE_RUNTIME;
option optimize_for = SPEED;